Q1
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    char filename[256];
    printf("Enter the file name to search in the current directory: ");
    scanf("%s", filename);

    if (access(filename, F_OK) == 0) {
        printf("The file '%s' exists in the current directory.\n", filename);
    } else {
        printf("The file '%s' does not exist in the current directory.\n", filename);
    }
    return 0;
}

Q2
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#define MAX_BUF 100

int main() {
    int pipe_fd[2];
    pid_t pid;
    char buffer[MAX_BUF];
    if (pipe(pipe_fd) == -1) {
        perror("Pipe creation failed");
        exit(1);
    }
    pid = fork();
    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    }
    if (pid == 0) {
        // Child process: write messages to the pipe
        close(pipe_fd[0]); 
        write(pipe_fd[1], "Hello World", strlen("Hello World") + 1);
        write(pipe_fd[1], "Hello SPPU", strlen("Hello SPPU") + 1);
        write(pipe_fd[1], "Linux is Funny", strlen("Linux is Funny") + 1);
        close(pipe_fd[1]);
        exit(0);  
    } else {
        // Parent process: read messages from the pipe
        close(pipe_fd[1]); 
        printf("Parent received messages:\n");

        read(pipe_fd[0], buffer, MAX_BUF);
        printf("%s\n", buffer);

        read(pipe_fd[0], buffer, MAX_BUF);
        printf("%s\n", buffer);

        read(pipe_fd[0], buffer, MAX_BUF);
        printf("%s\n", buffer);
        close(pipe_fd[0]); 
        wait(NULL);  
    }
    return 0;
}
