Q1
#include <stdio.h>
#include <sys/stat.h>
#include <stdlib.h>
void print_inode_and_type(const char *filename) {
    struct stat file_stat;

    if (stat(filename, &file_stat) == -1) {
        perror("stat");
        return;
    }

    printf("File: %s\n", filename);
    printf("Inode: %lu\n", file_stat.st_ino);

    if (S_ISREG(file_stat.st_mode)) {
        printf("Type: Regular file\n");
    } else if (S_ISDIR(file_stat.st_mode)) {
        printf("Type: Directory\n");
    } else if (S_ISLNK(file_stat.st_mode)) {
        printf("Type: Symbolic link\n");
    } else if (S_ISCHR(file_stat.st_mode)) {
        printf("Type: Character device\n");
    } else if (S_ISBLK(file_stat.st_mode)) {
        printf("Type: Block device\n");
    } else if (S_ISFIFO(file_stat.st_mode)) {
        printf("Type: FIFO/pipe\n");
    } else if (S_ISSOCK(file_stat.st_mode)) {
        printf("Type: Socket\n");
    } else {
        printf("Type: Unknown\n");
    }
    printf("\n");
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <file1> <file2> ... <fileN>\n", argv[0]);
        exit(EXIT_FAILURE);
    }
    for (int i = 1; i < argc; i++) {
        print_inode_and_type(argv[i]);
    }
    return 0;
}

Q2
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>

void handle_alarm(int sig) {
    printf("Alarm is fired!\n");
}

int main() {
    pid_t pid;
    signal(SIGALRM, handle_alarm);
    pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        sleep(2); 
        kill(getppid(), SIGALRM); 
        exit(0); 
    } else {
        pause(); 
    }
    return 0;
}

