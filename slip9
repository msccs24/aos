Q1
#include<stdio.h>
#include<unistd.h>
#include<string.h>

int main()
{
   int fd[2],set=0;
   char buffer[]="Marvellous &nfoSystem";
   char readBuff[BUFSIZ];
   pid_t childpid;
   pipe(fd);
   childpid=fork();
   
   if(childpid==0)
   {
     close(fd[0]);
     printf("child initiated communication by writing the data at output size of pip\n");
      
      write(fd[1],buffer,sizeof(buffer));
    }
    else
    {
      close(fd[1]);
      set=read(fd[0],readBuff,sizeof(readBuff));
      printf("the data read by parent process is : %s\n",readBuff);
    }
    return 0;
}       

Q2
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

void identify_file_type(const char *filename) {
    struct stat fileStat;
    if (stat(filename, &fileStat) < 0) {
        perror("Error accessing file");
        return;
    }

    if (S_ISREG(fileStat.st_mode))
        printf("%s is a regular file.\n", filename);
    else if (S_ISDIR(fileStat.st_mode))
        printf("%s is a directory.\n", filename);
    else if (S_ISCHR(fileStat.st_mode))
        printf("%s is a character device.\n", filename);
    else if (S_ISBLK(fileStat.st_mode))
        printf("%s is a block device.\n", filename);
    else if (S_ISFIFO(fileStat.st_mode))
        printf("%s is a FIFO/pipe.\n", filename);
    else if (S_ISLNK(fileStat.st_mode))
        printf("%s is a symbolic link.\n", filename);
    else if (S_ISSOCK(fileStat.st_mode))
        printf("%s is a socket.\n", filename);
    else
        printf("%s is of an unknown file type.\n", filename);
}
int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return 1;
    }
    identify_file_type(argv[1]);
    return 0;
}
