Q1
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int main() {
    int pipefd[2]; // Array to hold the two ends of the pipe
    pid_t pid;
    char write_msg[] = "Hello from the parent process!";
    char read_msg[100];

    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }
    pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid > 0) {
        close(pipefd[0]);
        write(pipefd[1], write_msg, strlen(write_msg) + 1);
        close(pipefd[1]);
        wait(NULL);
        close(pipefd[1]); 
        if (read(pipefd[0], read_msg, sizeof(read_msg)) > 0) {
            printf("Parent received: %s\n", read_msg);
        }
        close(pipefd[0]);
    } else {
        close(pipefd[1]);
        read(pipefd[0], read_msg, sizeof(read_msg));
        printf("Child received: %s\n", read_msg);
        close(pipefd[0]);
        close(pipefd[0]); 
        write(pipefd[1], "Message received by child", strlen("Message received by child") + 1);
        close(pipefd[1]);
        exit(0);
    }
    return 0;
}

Q2
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

void identify_file_type(const char *filename) {
    struct stat fileStat;
    if (stat(filename, &fileStat) < 0) {
        perror("Error accessing file");
        return;
    }

    if (S_ISREG(fileStat.st_mode))
        printf("%s is a regular file.\n", filename);
    else if (S_ISDIR(fileStat.st_mode))
        printf("%s is a directory.\n", filename);
    else if (S_ISCHR(fileStat.st_mode))
        printf("%s is a character device.\n", filename);
    else if (S_ISBLK(fileStat.st_mode))
        printf("%s is a block device.\n", filename);
    else if (S_ISFIFO(fileStat.st_mode))
        printf("%s is a FIFO/pipe.\n", filename);
    else if (S_ISLNK(fileStat.st_mode))
        printf("%s is a symbolic link.\n", filename);
    else if (S_ISSOCK(fileStat.st_mode))
        printf("%s is a socket.\n", filename);
    else
        printf("%s is of an unknown file type.\n", filename);
}
int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return 1;
    }
    identify_file_type(argv[1]);
    return 0;
}
