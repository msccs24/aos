Q1
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <file1> <file2> ... <fileN>\n", argv[0]);
        exit(EXIT_FAILURE);
    }
    for (int i = 1; i < argc; i++) {
        if (access(argv[i], F_OK) == 0) {
            printf("File '%s' is present in the current directory.\n", argv[i]);
        } else {
            printf("File '%s' is not present in the current directory.\n", argv[i]);
        }
    }
    return 0;
}

Q2
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/wait.h>
pid_t child_pid = 0;

void handle_sighup(int sig) {
    printf("Child process received SIGHUP signal\n");
}
void handle_sigint(int sig) {
    printf("Child process received SIGINT signal\n");
}
void handle_sigquit(int sig) {
    printf("My Papa has Killed me!!!\n");
    exit(0); 
}
int main() {
    child_pid = fork(); 
    if (child_pid < 0) {
        perror("fork failed");
        exit(EXIT_FAILURE);
    } else if (child_pid == 0) {
        signal(SIGHUP, handle_sighup); 
        signal(SIGINT, handle_sigint);    
        signal(SIGQUIT, handle_sigquit);  

        while (1) {
            pause();
        }
    } else {
        for (int i = 1; i <= 5; i++) {
            if (i % 2 == 1) {
                kill(child_pid, SIGHUP); 
            } else {
                kill(child_pid, SIGINT); 
            }
            sleep(3);
        }
        kill(child_pid, SIGQUIT);
        wait(NULL);
        printf("Parent process: Child has been terminated.\n");
    }
    return 0;
}
