Q1
#include<stdio.h>
#include<stddef.h>
#include<dirent.h>
#include<string.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<time.h>
#include<stdlib.h>
int main(int argc,char *argv[])
{
   char in[100],st[100],*ch,*ch1,c,buff[512];
   DIR *dp;
   int i;
   struct dirent *ep;
   struct stat sb;
   char mon[100];
   if((dp=opendir(argv[1]))==NULL)
       printf("Cannot open %s",argv[1]);
   if(dp!=NULL)
   {
       while(ep=readdir(dp))
       {
         if(stat(ep->d_name,&sb)==-1)
         {
           perror("stat");
           exit(EXIT_SUCCESS);
         }
         strcpy(mon,ctime(&sb.st_ctime));
         ch=strtok(mon," ");
         ch=strtok(NULL," ");
         ch1=strtok(ch," ");
         if((strcmp(ch1,argv[2]))==0)
         {
             printf("%s \t \t %s",ep->d_name,ctime(&sb.st_ctime));         
         }
       }

         (void)closedir(dp);
      }
      return 0;
   }

Q2

#include<stdio.h>
#include<signal.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/stat.h>

void sighup();
void sigint();
void siguit();

void main()
{
    int pid;
    if((pid=fork())<0)
    {
        perror("fork");
        exit(1);
    }
    if(pid==0)
    {
        signal(SIGHUP,sighup);
        signal(SIGINT,sigint);
        signal(SIGQUIT,sigquit);
        for(;;);
    }
    else
    {
        printf("\n Parent : sending SIGHUP\n\n");
        kill(pid,SIGHUP);
        sleep(3);
        printf("\n Parent : sending SIGINT\n\n");
        kill(pid,SIGINT);
        sleep(3);
        printf("\n Parent : sending SIGQUIT\n\n");
        kill(pid,SIGQUIT);
        sleep(3);
    }
    return 0;
}

void sighup()
{
    signal(SIGHUP,sighup);
    printf("Child, I have received a SIGHUP\n");
}
void sigint()
{
    signal(SIGINT,sigint);
    printf("Child, I have received a SIGINT\n");
}
void sigquit()
{
    printf("My Daddy has Failed me !!!\n");
    exit(0);
}
