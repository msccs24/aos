Q1
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
int main() {
    DIR *dir;
    struct dirent *entry;
    int file_count = 0;

    dir = opendir(".");
    if (dir == NULL) {
        perror("Unable to open directory.");
        exit(EXIT_FAILURE);
    }
    printf("Files and directories in the current directory:\n");

    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name); 
        file_count++; 
    }
    closedir(dir);
    printf("\nTotal number of files and directories: %d\n", file_count);
    return 0;
}

Q2 
#include<stdio.h>
#include<unistd.h>

int main()
{
  int pipefds[2];
  int returnstatus;
  char writemessage[3][20]={"Hello World","Hello Sppu","Linux is Funny"};
  char readmessage[20];
  returnstatus=pipe(pipefds);
  
  if(returnstatus==-1)
  {
    printf("Unable to create file|n");
    return 1;
  }
  int child=fork();
  if(child==0)
  {
    printf("child is writing to pipe_message 1 is %s\n",writemessage[0]);
    printf("child is writing to pipe-message 2 is %s\n",writemessage[1]);
    printf("child is writing to pipe-message 3 is %s\n",writemessage[2]);
    
    write(pipefds[1],writemessage[0],sizeof(writemessage[0]));
    write(pipefds[1],writemessage[1],sizeof(writemessage[1]));
    write(pipefds[1],writemessage[2],sizeof(writemessage[2]));
  }
  else
  {
    read(pipefds[0],readmessage,sizeof(readmessage));
    printf("parent process is reading from pipe_message 1 is %s\n",readmessage);  
    read(pipefds[0],readmessage,sizeof(readmessage));
    printf("parent process is reading from pipe_message 2 is %s\n",readmessage);
    read(pipefds[0],readmessage,sizeof(readmessage));
    printf("parent process is reading from pipe_message 3 is %s\n",readmessage);
  }
  return 0;
}    
     
